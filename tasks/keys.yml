- name: delete existing keys folder
  file:
    state: absent
    path: "{{ bind_base_zones_path }}/keys"

- name: create keys folder
  file: >
        dest={{ bind_base_zones_path }}/keys
        state=directory owner={{ bind_user }}
        group={{ bind_group }} mode=0755

- name: create keys directories
  file: >
        dest={{ bind_base_zones_path }}/keys/{{ item.key }}
        state=directory owner={{ bind_user }}
        group={{ bind_group }} mode=0755
  with_dict: '{{bind_config_master_zones}}'

- name: generate TSIG keys
  command: "dnssec-keygen -r /dev/urandom -a HMAC-MD5 -b 512 -n HOST {{item.key}}"
  args:
    chdir: '{{ bind_base_zones_path }}/keys/{{item.key}}/'
  when: item.value.dnssec is defined and item.value.dnssec
  with_dict: '{{bind_config_master_zones}}'

- name: get the key values in a hash
  shell: "grep Key {{ bind_base_zones_path }}/keys/{{item.key}}/K{{item.key}}.*.private | awk '{print $2}'"
  register: "tsig_keys"
  with_dict: '{{bind_config_master_zones}}'

- name: save the key values to config
  template:
    src: named.conf.local.keys.j2
    dest: "{{ bind_base_zones_path }}/named.conf.local.keys.{{ item.item.key }}"
    owner: "{{ bind_user }}"
    group: "{{ bind_group }}"
    mode: 0755
  with_items: "{{ tsig_keys.results }}"