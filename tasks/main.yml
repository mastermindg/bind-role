---
- name: set distro
  set_fact:
    ansible_distro: "{{ ansible_distribution|lower|replace('\"', '') }}"

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distro }}-{{
            ansible_distribution_version|lower|replace('/', '_') }}.yml"
        - "{{ ansible_distro }}-{{ ansible_distribution_release }}.yml"
        - "{{ ansible_distro }}-{{
            ansible_distribution_major_version|lower|replace('/', '_') }}.yml"
        - "{{ ansible_distro }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
      paths:
        - ../vars
      skip: true

- name: install bind packages
  package:
    name: "{{ item }}"
    state: "{{ bind_pkg_state }}"
  with_items: "{{ bind_pkgs }}"

- name: delete existing config folder
  file:
    state: absent
    path: "{{ bind_base_zones_path }}/"

- name: create and configure keys
  import_tasks: "keys.yml"

- name: setup zone directories
  file: >
        dest={{ bind_base_zones_path }}/{{ item }}
        state=directory owner={{ bind_user }}
        group={{ bind_group }} mode=0755
  with_items:
    - masters
    - slaves

- name: setup zones
  template: >
            src=named.conf.local.{{ item }}.j2
            dest={{ bind_config_basepath }}/named.conf.local.{{ item }}
            owner={{ bind_user }} group={{ bind_group }} mode=0600
  with_items:
    - master
    - slave
    - forward
  notify: reload bind

- name: configure bind
  template: >
        src=named.conf.j2 dest={{ bind_conf_path }}/named.conf
        owner={{ bind_user }} group={{ bind_group }} mode=0600
  notify: restart bind

- name: configure bind options
  template: >
            src=named.conf.options.j2
            dest={{ bind_config_basepath }}/named.conf.options
            owner={{ bind_user }} group={{ bind_group }} mode=0600
  notify: restart bind

- name: create master zone files
  template: >
        src=masters/db
        dest={{ bind_base_zones_path }}/masters/db.{{item.key}}.zone
        owner={{ bind_user }} group={{ bind_group }}
  with_dict: '{{bind_config_master_zones}}'
  register: zone
  notify: reload bind
  tags: bind

- name: create rndc config and key
  shell: "rndc-confgen -r /dev/urandom >  {{ bind_base_zones_path }}/rndc.conf"
  when: ansible_distro == 'debian'

- name: enable and start bind service
  service: >
           name={{ bind_service_name }} state={{ bind_service_state }}
           enabled={{ bind_service_enabled }}

- name: add DNS record
  nsupdate:
    key_name: "{{ zone_add }}"
    key_secret: "{{ dnssec_key }}"
    server: "dns01"
    zone: "{{ zone_add }}"
    record: "ansible"
    value: "192.168.1.1"
  delegate_to: dns01
